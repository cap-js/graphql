"""
The `Binary` scalar type represents binary values as `base64url` encoded strings.
"""
scalar Binary

input Binary_filter {
  eq: Binary
  ne: [Binary]
}

input Boolean_filter {
  eq: Boolean
  ne: [Boolean]
}

"""
The `Date` scalar type represents date values as strings in the ISO 8601 format `YYYY-MM-DD`.
"""
scalar Date

"""
The `DateTime` scalar type represents datetime values as strings in the ISO 8601 format `YYYY-MM-DDThh-mm-ssTZD`.
"""
scalar DateTime

input DateTime_filter {
  eq: DateTime
  ge: DateTime
  gt: DateTime
  le: DateTime
  lt: DateTime
  ne: [DateTime]
}

input Date_filter {
  eq: Date
  ge: Date
  gt: Date
  le: Date
  lt: Date
  ne: [Date]
}

"""
The `Decimal` scalar type represents exact signed decimal values. Decimal represents values as strings rather than floating point numbers.
"""
scalar Decimal

input Decimal_filter {
  eq: Decimal
  ge: Decimal
  gt: Decimal
  le: Decimal
  lt: Decimal
  ne: [Decimal]
}

input Float_filter {
  eq: Float
  ge: Float
  gt: Float
  le: Float
  lt: Float
  ne: [Float]
}

input ID_filter {
  eq: ID
  ge: ID
  gt: ID
  le: ID
  lt: ID
  ne: [ID]
}

"""
The `Int16` scalar type represents 16-bit non-fractional signed whole numeric values. Int16 can represent values between -(2^15) and 2^15 - 1.
"""
scalar Int16

input Int16_filter {
  eq: Int16
  ge: Int16
  gt: Int16
  le: Int16
  lt: Int16
  ne: [Int16]
}

"""
The `Int64` scalar type represents 64-bit non-fractional signed whole numeric values. Int64 can represent values between -(2^63) and 2^63 - 1.
"""
scalar Int64

input Int64_filter {
  eq: Int64
  ge: Int64
  gt: Int64
  le: Int64
  lt: Int64
  ne: [Int64]
}

input Int_filter {
  eq: Int
  ge: Int
  gt: Int
  le: Int
  lt: Int
  ne: [Int]
}

type Mutation {
  TypesService: TypesService_input
}

type Query {
  TypesService: TypesService
}

enum SortDirection {
  asc
  desc
}

input String_filter {
  contains: [String]
  endswith: String
  eq: String
  ge: String
  gt: String
  le: String
  lt: String
  ne: [String]
  startswith: String
}

"""
The `Time` scalar type represents time values as strings in the ISO 8601 format `hh:mm:ss`.
"""
scalar Time

input Time_filter {
  eq: Time
  ge: Time
  gt: Time
  le: Time
  lt: Time
  ne: [Time]
}

"""
The `Timestamp` scalar type represents timestamp values as strings in the ISO 8601 format `YYYY-MM-DDThh-mm-ss.sTZD` with up to 7 digits of fractional seconds.
"""
scalar Timestamp

input Timestamp_filter {
  eq: Timestamp
  ge: Timestamp
  gt: Timestamp
  le: Timestamp
  lt: Timestamp
  ne: [Timestamp]
}

type TypesService {
  MyEntity(filter: [TypesService_MyEntity_filter], orderBy: [TypesService_MyEntity_orderBy], skip: Int, top: Int): TypesService_MyEntity_connection
}

type TypesService_MyEntity {
  myBinary: Binary
  myBoolean: Boolean
  myDate: Date
  myDateTime: DateTime
  myDecimal: Decimal
  myDecimalFloat: Float
  myDouble: Float
  myInt16: Int16
  myInt32: Int
  myInt64: Int64
  myInteger: Int
  myInteger64: Int64
  myLargeBinary: Binary
  myLargeString: String
  myString: String
  myTime: Time
  myTimestamp: Timestamp
  myUInt8: UInt8
  myUUID: ID
}

input TypesService_MyEntity_C {
  myBinary: Binary
  myBoolean: Boolean
  myDate: Date
  myDateTime: DateTime
  myDecimal: Decimal
  myDecimalFloat: Float
  myDouble: Float
  myInt16: Int16
  myInt32: Int
  myInt64: Int64
  myInteger: Int
  myInteger64: Int64
  myLargeBinary: Binary
  myLargeString: String
  myString: String
  myTime: Time
  myTimestamp: Timestamp
  myUInt8: UInt8
  myUUID: ID
}

input TypesService_MyEntity_U {
  myBinary: Binary
  myBoolean: Boolean
  myDate: Date
  myDateTime: DateTime
  myDecimal: Decimal
  myDecimalFloat: Float
  myDouble: Float
  myInt16: Int16
  myInt32: Int
  myInt64: Int64
  myInteger: Int
  myInteger64: Int64
  myLargeBinary: Binary
  myLargeString: String
  myString: String
  myTime: Time
  myTimestamp: Timestamp
  myUInt8: UInt8
}

type TypesService_MyEntity_connection {
  nodes: [TypesService_MyEntity]
  totalCount: Int
}

input TypesService_MyEntity_filter {
  myBinary: [Binary_filter]
  myBoolean: [Boolean_filter]
  myDate: [Date_filter]
  myDateTime: [DateTime_filter]
  myDecimal: [Decimal_filter]
  myDecimalFloat: [Float_filter]
  myDouble: [Float_filter]
  myInt16: [Int16_filter]
  myInt32: [Int_filter]
  myInt64: [Int64_filter]
  myInteger: [Int_filter]
  myInteger64: [Int64_filter]
  myLargeBinary: [Binary_filter]
  myLargeString: [String_filter]
  myString: [String_filter]
  myTime: [Time_filter]
  myTimestamp: [Timestamp_filter]
  myUInt8: [UInt8_filter]
  myUUID: [ID_filter]
}

type TypesService_MyEntity_input {
  create(input: [TypesService_MyEntity_C]!): [TypesService_MyEntity]
  delete(filter: [TypesService_MyEntity_filter]!): Int
  update(filter: [TypesService_MyEntity_filter]!, input: TypesService_MyEntity_U!): [TypesService_MyEntity]
}

input TypesService_MyEntity_orderBy {
  myBinary: SortDirection
  myBoolean: SortDirection
  myDate: SortDirection
  myDateTime: SortDirection
  myDecimal: SortDirection
  myDecimalFloat: SortDirection
  myDouble: SortDirection
  myInt16: SortDirection
  myInt32: SortDirection
  myInt64: SortDirection
  myInteger: SortDirection
  myInteger64: SortDirection
  myLargeBinary: SortDirection
  myLargeString: SortDirection
  myString: SortDirection
  myTime: SortDirection
  myTimestamp: SortDirection
  myUInt8: SortDirection
  myUUID: SortDirection
}

type TypesService_input {
  MyEntity: TypesService_MyEntity_input
}

"""
The `UInt8` scalar type represents 8-bit non-fractional unsigned whole numeric values. UInt8 can represent values between 0 and 2^8 - 1.
"""
scalar UInt8

input UInt8_filter {
  eq: UInt8
  ge: UInt8
  gt: UInt8
  le: UInt8
  lt: UInt8
  ne: [UInt8]
}