describe('graphql - queries with localized data', () => {
  const cds = require('@sap/cds/lib')
  const path = require('path')
  const { gql } = require('../util')

  const { axios, POST, data } = cds.test(path.join(__dirname, '../resources/bookshop-graphql'))
  // Prevent axios from throwing errors for non 2xx status codes
  axios.defaults.validateStatus = false
  data.autoReset(true)

  test('query with default locale', async () => {
    const query = gql`
      {
        AdminService {
          Books {
            nodes {
              title
            }
          }
        }
      }
    `
    const data = {
      data: {
        AdminService: {
          Books: {
            nodes: [
              { title: 'Wuthering Heights' },
              { title: 'Jane Eyre' },
              { title: 'The Raven' },
              { title: 'Eleonora' },
              { title: 'Catweazle' }
            ]
          }
        }
      }
    }
    const response = await POST('/graphql', { query })
    expect(response.data).toEqual(data)
  })

  test('query with locale de', async () => {
    const query = gql`
      {
        AdminService {
          Books {
            nodes {
              title
            }
          }
        }
      }
    `
    const data = {
      data: {
        AdminService: {
          Books: {
            nodes: [
              { title: 'Sturmhöhe' },
              { title: 'Jane Eyre' },
              { title: 'The Raven' },
              { title: 'Eleonora' },
              { title: 'Catweazle' }
            ]
          }
        }
      }
    }
    const response = await POST('/graphql', { query }, { headers: { 'Accept-Language': 'de' } })
    expect(response.data).toEqual(data)
  })

  test('query with unknown locale defaults to en', async () => {
    const query = gql`
      {
        AdminService {
          Books {
            nodes {
              title
            }
          }
        }
      }
    `
    const data = {
      data: {
        AdminService: {
          Books: {
            nodes: [
              { title: 'Wuthering Heights' },
              { title: 'Jane Eyre' },
              { title: 'The Raven' },
              { title: 'Eleonora' },
              { title: 'Catweazle' }
            ]
          }
        }
      }
    }
    const response = await POST('/graphql', { query }, { headers: { 'Accept-Language': 'es' } })
    expect(response.data).toEqual(data)
  })

  test('create localized data with deep insert', async () => {
    const query = gql`
      mutation ($input: AdminService_Books_C) {
        AdminService {
          Books {
            create(input: [$input]) {
              ID
              title
              texts {
                nodes {
                  locale
                  title
                }
              }
            }
          }
        }
      }
    `
    const texts = [{ locale: 'de', title: 'Die Rückkehr des Königs' }]
    const book = {
      ID: 600, // <- autogenerated keys only with UUIDs
      title: 'The Return of the King'
    }
    const input = { ...book, texts }
    const variables = { input }
    const data = {
      AdminService: {
        Books: {
          create: [{ ...book, texts: { nodes: texts } }]
        }
      }
    }
    const response = await POST('/graphql', { query, variables })
    expect(response.data).toEqual({ data })

    const result = await SELECT.from('sap.capire.bookshop.Books_texts').columns('locale', 'title')
    expect(result).toContainEqual({ locale: 'de', title: 'Die Rückkehr des Königs' })
  })

  test('update localized data', async () => {
    const query = gql`
      mutation ($filter: AdminService_Books_filter, $input: AdminService_Books_U!) {
        AdminService {
          Books {
            update(filter: [$filter], input: $input) {
              texts {
                nodes {
                  locale
                  title
                }
              }
            }
          }
        }
      }
    `
    const texts = [{ locale: 'fr', title: 'Éléonora' }]
    const input = { texts }
    const variables = { filter: { ID: { eq: 252 } }, input }
    const data = {
      AdminService: {
        Books: {
          update: [{ texts: { nodes: texts } }]
        }
      }
    }
    const responseUpdate = await POST('/graphql', { query, variables })
    expect(responseUpdate.data).toEqual({ data })

    const result = await SELECT.from('sap.capire.bookshop.Books_texts').columns('ID', 'locale', 'title')
    expect(result).toContainEqual({ ID: 252, locale: 'fr', title: 'Éléonora' })
  })

  test('update empty localized data', async () => {
    const queryCreate = gql`
      mutation ($input: AdminService_Books_C) {
        AdminService {
          Books {
            create(input: [$input]) {
              ID
              title
            }
          }
        }
      }
    `
    const inputCreate = {
      ID: 601, // <- autogenerated keys only with UUIDs
      title: 'The Return of the King'
    }
    const variablesCreate = { input: inputCreate }
    const dataCreate = {
      AdminService: {
        Books: {
          create: [inputCreate]
        }
      }
    }
    const response = await POST('/graphql', { query: queryCreate, variables: variablesCreate })
    expect(response.data).toEqual({ data: dataCreate })

    const queryUpdate = gql`
      mutation ($filter: AdminService_Books_filter, $input: AdminService_Books_U!) {
        AdminService {
          Books {
            update(filter: [$filter], input: $input) {
              texts {
                nodes {
                  locale
                  title
                }
              }
            }
          }
        }
      }
    `
    const textsUpdate = [{ locale: 'de', title: 'Die Rückkehr des Königs' }]
    const inputUpdate = { texts: textsUpdate }
    const variablesUpdate = { filter: { ID: { eq: 601 } }, input: inputUpdate }
    const dataUpdate = {
      AdminService: {
        Books: {
          update: [{ texts: { nodes: textsUpdate } }]
        }
      }
    }
    const responseUpdate = await POST('/graphql', { query: queryUpdate, variables: variablesUpdate })
    expect(responseUpdate.data).toEqual({ data: dataUpdate })

    const result = await SELECT.from('sap.capire.bookshop.Books_texts').columns('ID', 'locale', 'title')
    expect(result).toContainEqual({ ID: 601, locale: 'de', title: 'Die Rückkehr des Königs' })
  })

  test('update localized data with empty texts array', async () => {
    const queryCreate = gql`
      mutation ($input: AdminService_Books_C) {
        AdminService {
          Books {
            create(input: [$input]) {
              ID
              title
              texts {
                nodes {
                  locale
                  title
                }
              }
            }
          }
        }
      }
    `
    const textsCreate = [{ locale: 'de', title: 'Die Rückkehr des Königs' }]
    const bookCreate = {
      ID: 601, // <- autogenerated keys only with UUIDs
      title: 'The Return of the King'
    }
    const inputCreate = { ...bookCreate, texts: textsCreate }
    const variablesCreate = { input: inputCreate }
    const dataCreate = {
      AdminService: {
        Books: {
          create: [{ ...bookCreate, texts: { nodes: textsCreate } }]
        }
      }
    }
    const response = await POST('/graphql', { query: queryCreate, variables: variablesCreate })
    expect(response.data).toEqual({ data: dataCreate })

    const queryUpdate = gql`
      mutation ($filter: AdminService_Books_filter, $input: AdminService_Books_U!) {
        AdminService {
          Books {
            update(filter: [$filter], input: $input) {
              texts {
                nodes {
                  locale
                  title
                }
              }
            }
          }
        }
      }
    `
    const textsUpdate = []
    const inputUpdate = { texts: textsUpdate }
    const variablesUpdate = { filter: { ID: { eq: 601 } }, input: inputUpdate }
    const dataUpdate = {
      AdminService: {
        Books: {
          update: [{ texts: { nodes: textsUpdate } }]
        }
      }
    }
    const responseUpdate = await POST('/graphql', { query: queryUpdate, variables: variablesUpdate })
    expect(responseUpdate.data).toEqual({ data: dataUpdate })

    const result = await SELECT.from('sap.capire.bookshop.Books_texts').columns('ID', 'locale', 'title')
    expect(result).not.toContainEqual({ ID: 601, locale: 'de', title: 'Die Rückkehr des Königs' })
  })

  test('delete single entry should delete localized data', async () => {
    const query = gql`
      mutation ($filter: AdminService_Books_filter) {
        AdminService {
          Books {
            delete(filter: [$filter])
          }
        }
      }
    `
    const variables = { filter: { ID: { eq: 201 } } }
    const data = {
      AdminService: {
        Books: {
          delete: 1
        }
      }
    }
    const response = await POST('/graphql', { query, variables })
    expect(response.data).toEqual({ data })

    const result = await SELECT.from('sap.capire.bookshop.Books_texts').columns('locale', 'ID', 'title')
    expect(result).not.toContainEqual({ locale: 'de', ID: 201, title: 'Sturmhöhe' })
  })
})
